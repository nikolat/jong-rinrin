//**********************************************************
// LICENSE: CC0 1.0 Universal
// http://creativecommons.org/publicdomain/zero/1.0/
//**********************************************************

//**********************************************************
// 設定
//**********************************************************
// バージョン
MJ.Version
{
	'UKAJONG/0.2'
}
// 返答時のイベント名
MJ.ResponseEventID
{
	'OnMahjongResponse'
}
// イベントログをだらだら見るモード
MJ.ShowAllLogMode
{
	0
}
// 自分の名前(sakura.name)
MJ.PlayerName
{
	sakura.name
}

//**********************************************************
// ID: OnMahjong
// Reference0: バージョン(UKAJONG/0.2)
// Reference1: サーバコマンド(gamestart|gameend|...)
// Reference2以降: サーバコマンド追加情報
//**********************************************************
OnMahjong
{
	//イベントログ垂れ流し
	if MJ.ShowAllLogMode() {
		MJ.ShowAllLog()
	}
	elseif reference[0] == MJ.Version() {
		MJ.Main()
	}
}

//**********************************************************
// イベントログ垂れ流し
//**********************************************************
MJ.ShowAllLog
{
	_res = 'ID: OnMahjong\n'
	for _i = 0; _i < ARRAYSIZE(reference); _i++ {
		_res += 'Reference' + _i + ': ' + reference[_i] + '\n'
	}
	_res = '\C\0\b[2]\s[0]\n\_q' + _res + MJ.Main()
	_res
}

//**********************************************************
// メイン処理
//**********************************************************
MJ.Main
{
	_r = reference[1]
	_r = REPLACE(_r, '?', '_')
	if ISFUNC('MJ.' + _r) {
		EVAL('MJ.' + _r)
	}
}

//**********************************************************
// hello 接続確認
//**********************************************************
MJ.hello
{
	MJ.SendResponse(reference[1], "ump=%(MJ.ump_version())", "name=%(MJ.PlayerName())")
}
MJ.ump_version
{
	'?'
}

//**********************************************************
// gamestart ゲーム(半荘)開始
// Reference2: 席(東|南|西|北)
// Reference3: プレイヤー名1
// Reference4: プレイヤー名2
// Reference5: プレイヤー名3
// Reference6: プレイヤー名4
//**********************************************************
MJ.gamestart : nonoverlap
{
	'\0\s[0]よろしく。\e'
	'\0\s[5]楽しもうではないか。\e'
	'\0\s[6]全力で来るがいい。\e'
	'\0\s[7]いざ勝負！\e'
	'\0\s[8]手加減はせんぞ。\e'
	MJ.Save.PlayerName = reference[3,6]
}

//**********************************************************
// gameend ゲーム終了
// Reference2: プレイヤー名1[0x01]点数
// Reference3: プレイヤー名2[0x01]点数
// Reference4: プレイヤー名3[0x01]点数
// Reference5: プレイヤー名4[0x01]点数
//**********************************************************
MJ.gameend : nonoverlap
{
	for _i = 2; _i <= 5; _i++ {
		_playerName = reference[_i][0, CHR(1)]
		_score = TOINT(reference[_i][1, CHR(1)])
		MJ.Save.Player.Score[MJ.B(_playerName)] = _score
	}
	_rank_self = MJ.GetRank(MJ.PlayerName())
	_rank_user = MJ.GetRank('user')
	if _rank_self == 1 {
		'\0\s[5]当然の結果だな。\e'
		'\0\s[0]またいつでも相手になろう。\e'
	}
	elseif _rank_user == 1 {
		'\0\s[1]%usernameは強いのだな…。\e'
		'\0\s[8]%usernameには敵わんな。\e'
	}
	elseif _rank_self == 4 {
		'\0\s[3]敗因を分析せねば…。\e'
		'\0\s[4]こんなはずでは…。\e'
	}
	else {
		'\0\s[0]いい対局だった。\e'
		'\0\s[6]勝負は時の運。\e'
	}
	ERASEVAR('MJ.Save.PlayerName')
	ERASEVAR('MJ.Save.Player.Score')
}

//**********************************************************
// kyokustart 一局が始まるときに送る
// Reference2: 場風(東|南|西|北)
// Reference3: 親(ex.プレイヤー名1)
// Reference4: 本場(ex.1)
// Reference5: 供託(ex.1000)
//**********************************************************
MJ.kyokustart
{
	'\0\s[0]\e'
	MJ.kyokuinit()
	MJ.Save.Status = ''
	MJ.Save.Kawa = ''
	MJ.Save.Richi = 0
	MJ.Save.Dorahyouji = ''
	MJ.Save.Uradorahyouji = ''
	MJ.Save.Bafuhai = MJ.GetBafuhai(reference[2])
	MJ.Save.Jifuhai = MJ.GetJifuhai(reference[3])
	MJ.Save.Kyoku = ASEARCH(reference[3], MJ.Save.PlayerName) + 1
	MJ.Save.Furo.Own = ''
	MJ.Save.Furo.Other = ''
	MJ.Save.Sutehai = ''
	MJ.Save.Players = MJ.GetPlayers(reference[3])
	MJ.Save.Player.Kawa = ('', '', '', '')
	MJ.Save.Player.Richi = (0, 0, 0, 0)
	MJ.Save.Player.Genbutsu = ('', '', '', '')
	MJ.Save.VisiblePai = ''
}

MJ.kyokuinit
{
	ERASEVAR('MJ.Save.Status')
	ERASEVAR('MJ.Save.Tehai')
	ERASEVAR('MJ.Save.Tsumo')
	ERASEVAR('MJ.Save.Kawa')
	ERASEVAR('MJ.Save.Richi')
	ERASEVAR('MJ.Save.Dorahyouji')
	ERASEVAR('MJ.Save.Uradorahyouji')
	ERASEVAR('MJ.Save.Bafuhai')
	ERASEVAR('MJ.Save.Jifuhai')
	ERASEVAR('MJ.Save.Kyoku')
	ERASEVAR('MJ.Save.Furo.Own')
	ERASEVAR('MJ.Save.Furo.Other')
	ERASEVAR('MJ.Save.Sutehai')
	ERASEVAR('MJ.Save.Players')
	ERASEVAR('MJ.Save.Player.Kawa')
	ERASEVAR('MJ.Save.Player.Richi')
	ERASEVAR('MJ.Save.Player.Genbutsu')
	ERASEVAR('MJ.Save.VisiblePai')
}

MJ.GetBafuhai
{
	case _argv[0] {
	when '東' {
		'1z'
	}
	when '南' {
		'2z'
	}
	else {
		''
	}
	}
}

MJ.GetJifuhai
{
	_oya = -1
	_self = -1
	for _i = 0; _i < 4; _i++ {
		if MJ.Save.PlayerName[_i] == _argv[0] {
			_oya = _i
		}
		if MJ.Save.PlayerName[_i] == MJ.PlayerName() {
			_self = _i
		}
	}
	_n = (4 + _self - _oya) % 4 + 1
	TOSTR(_n) + 'z'
}

//MJ.Save.PlayerNameを東家から並べ直したものを得る
MJ.GetPlayers
{
	_r = IARRAY()
	_i = 0
	_findOya = 0
	while ARRAYSIZE(_r) < 4 {
		if MJ.Save.PlayerName[_i] == _argv[0] {
			_findOya = 1
		}
		if _findOya {
			_r ,= MJ.Save.PlayerName[_i]
		}
		_i = (_i + 1) % 4
	}
	_r
}

//ゲーム開始時席順index
MJ.B
{
	ASEARCH(_argv[0], MJ.Save.PlayerName)
}

//東家からのindex
MJ.I
{
	ASEARCH(_argv[0], MJ.Save.Players)
}

//**********************************************************
// kyokuend 一局終了
//**********************************************************
MJ.kyokuend
{
	if SHIORI3FW.CanTalk() {
		'\0\s[0]\e'
	}
	MJ.kyokuinit()
}

//**********************************************************
// point プレイヤーの点数を通知する
// Reference2: プレイヤー名
// Reference3: (=|+|-) =は点数の直指定、+-は増減を意味する
// Reference4: 点数
//**********************************************************
MJ.point : nonoverlap
{
	if reference[3] == '=' {
		MJ.Save.Player.Score[MJ.B(reference[2])] = reference[4]
		//増減のみに反応
		return
	}

	//自分の点数通知のみに反応
	if reference[2] != MJ.PlayerName() {
		return
	}

	//流局では一々喋らない
	if MJ.Save.Status == '流局' {
		return
	}

	if reference[3] == '+' {
		if 8000 <= reference[4] {
			'\0\s[5]ふふっ。\e'
			'\0\s[5]運が向いてきたな。\e'
			'\0\s[5]いい流れだ。\e'
			'\0\s[8]悪く思うな。\e'
		}
		else {
			'\0\s[5]悪くない結果だ。\e'
			'\0\s[5]調子が上がってきたぞ。\e'
			'\0\s[6]よし…。\e'
			'\0\s[6]刻んでいこう。\e'
		}
	}
	elseif reference[3] == '-' {
		if 8000 <= reference[4] {
			'\0\s[2]なんだと…。\e'
			'\0\s[3]ふんっ。\e'
			'\0\s[4]ありえん…。\e'
			'\0\s[7]いい気になるなよ。\e'
		}
		else {
			'\0\s[3]調子が悪いな。\e'
			'\0\s[4]やるな。\e'
			'\0\s[7]なんてこと…。\e'
			'\0\s[7]よくも…。\e'
		}
	}
}

//1位のとき、2位との差を返す(1位でないとき、1位との差をマイナスで返す)
MJ.GetLeadPoint
{
	_secondScore = -1000000
	for _i = 0; _i < 4; _i++ {
		if _i == MJ.B(MJ.PlayerName())
			continue
		if MJ.Save.Player.Score[_i] > _secondScore
			_secondScore = MJ.Save.Player.Score[_i]
	}
	MJ.Save.Player.Score[MJ.B(MJ.PlayerName())] - _secondScore
}

//順位を返す
MJ.GetRank
{
	_target = _argv[0]
	_scores = MJ.Save.Player.Score
	_rank = IARRAY()
	while ARRAYSIZE(_rank) < ARRAYSIZE(_scores) {
		_topScore = -1000000
		_topIndex = -1
		for _i = 0; _i < ARRAYSIZE(_scores); _i++ {
			if _scores[_i] > _topScore && ASEARCH(_i, _rank) == -1 {
				_topScore = _scores[_i]
				_topIndex = _i
			}
		}
		_rank ,= _topIndex
	}
	ASEARCH(MJ.B(_target), _rank) + 1
}

//**********************************************************
// haipai 配牌を配る
// Reference2: プレイヤー名
// Reference3: 配牌(ex.1m2m3m4p5p6p7s8s9s1z5z6z7z)
//**********************************************************
MJ.haipai
{
	MJ.Save.Tehai = reference[3]
	MJ.Save.VisiblePai += reference[3]
}

//**********************************************************
// dora ドラ表示牌を送る
// Reference2: 牌(ex.7z)
//**********************************************************
MJ.dora
{
	if MJ.Save.Status == '和了' {
		MJ.Save.Uradorahyouji += reference[2]
	}
	else {
		MJ.Save.Dorahyouji += reference[2]
		MJ.Save.VisiblePai += reference[2]
	}
}

//**********************************************************
// open 手牌を公開する(チー、ポン、カン)
// Reference2: プレイヤー名
// Reference3: 牌(ex.1p2p3p)
//**********************************************************
MJ.open
{
	_h = reference[3]
	if reference[2] == MJ.PlayerName() {
		case MJ.Save.Furo.Own {
		when 'chi','pon' {
			_toRemove = MJ.RemoveHai(_h, MJ.Save.Sutehai)
			MJ.Save.Tehai = MJ.RemoveHai(MJ.Save.Tehai, _toRemove) + '<' + _h + '>'
		}
		when 'kan' {
			if STRLEN(_h) == 2 {//加槓
				MJ.Save.Tehai = MJ.AddHai(MJ.Save.Tehai, MJ.Save.Tsumo)
				MJ.Save.Tehai = REPLACE(MJ.Save.Tehai, _h + _h + _h, _h + _h + _h + _h, 1)
				MJ.Save.Tehai = MJ.RemoveHai(MJ.Save.Tehai, _h)
			}
			elseif MJ.Save.Tsumo != '' {//暗槓
				MJ.Save.Tehai = MJ.AddHai(MJ.Save.Tehai, MJ.Save.Tsumo)
				MJ.Save.Tehai = MJ.RemoveHai(MJ.Save.Tehai, _h) + '(' + _h + ')'
			}
			else {//大明槓
				_toRemove = MJ.RemoveHai(_h, MJ.Save.Sutehai)
				MJ.Save.Tehai = MJ.RemoveHai(MJ.Save.Tehai, _toRemove) + '<' + _h + '>'
			}
		}
		}
		MJ.Save.Furo.Own = ''
		MJ.Save.Sutehai = ''
	}
	else {
		case MJ.Save.Furo.Other {
		when 'chi','pon' {
			_toAdd = MJ.RemoveHai(_h, MJ.Save.Sutehai)
			MJ.Save.VisiblePai += _toAdd
		}
		when 'kan' {
			if STRLEN(_h) == 2 {//加槓
				MJ.Save.VisiblePai += _h
			}
			elseif MJ.Save.Sutehai !_in_ _h {//暗槓
				MJ.Save.VisiblePai += _h
			}
			else {//大明槓
				_toAdd = MJ.RemoveHai(_h, MJ.Save.Sutehai)
				MJ.Save.VisiblePai += _toAdd
			}
		}
		}
		MJ.Save.Furo.Other = ''
	}
}

//**********************************************************
// tsumo 自摸
// Reference2: プレイヤー名(自分)
// Reference3: 残り枚数
// Reference4: 牌(ex.7z)
//**********************************************************
MJ.tsumo
{
	MJ.Save.Nokori = reference[3]
	MJ.Save.Tsumo = reference[4]
	MJ.Save.VisiblePai += reference[4]
	if SHIORI3FW.CanTalk() {
		'\0\s[0]\e'
	}
}

//**********************************************************
// sutehai 捨牌
// Reference2: プレイヤー名
// Reference3: 牌(ex.7z)
//**********************************************************
MJ.sutehai
{
	_playerName = reference[2]
	_sutehai = reference[3]
	MJ.Save.Sutehai = _sutehai
	//誰かリーチしていたら現物を更新
	for _i = 0; _i < ARRAYSIZE(MJ.Save.Player.Richi); _i++ {
		if MJ.Save.Player.Richi[_i] {
			MJ.Save.Player.Genbutsu[_i] += _sutehai
		}
	}
	//他家の捨牌の場合は情報取得に留める
	if _playerName != MJ.PlayerName() {
		MJ.Save.Player.Kawa[MJ.I(_playerName)] += _sutehai
		MJ.Save.VisiblePai += _sutehai
		return
	}
	MJ.Save.Kawa += _sutehai

	_res = ''
	if !ISVAR('MJ.Save.Tsumo') {
		//副露後
		MJ.Save.Tehai = MJ.RemoveHai(MJ.Save.Tehai, _sutehai)
	}
	elseif MJ.Save.Tsumo == _sutehai {
		//ツモ切り
		if SHIORI3FW.CanTalk() && !RAND(5) {
			_res = '\0\s[6]…。\e'
		}
	}
	else {
		//手出し
		MJ.Save.Tehai = MJ.AddHai(MJ.Save.Tehai, MJ.Save.Tsumo)
		MJ.Save.Tehai = MJ.RemoveHai(MJ.Save.Tehai, _sutehai)
		if SHIORI3FW.CanTalk() && !RAND(5) {
			_res = '\0\s[5]…。\e'
		}
	}
	// 他家（ユーザ）に悟られることは自分が不利になること。
	// でもゴーストにはそれくらいの「可愛らしさ」があってもよい。
	_res
	ERASEVAR('MJ.Save.Tsumo')
}

//**********************************************************
// sutehai? 捨牌を尋ねる
//**********************************************************
MJ.sutehai_
{
	_action = ''
	_select = ''
	if ISVAR('MJ.Save.Tsumo') {
		_shanten = MJ.GetShantenYaku(MJ.AddHai(MJ.Save.Tehai, MJ.Save.Tsumo), MJ.Save.Bafuhai, MJ.Save.Jifuhai)
		_dahai = ''
		_ankanHai = ''
		_kakanHai = ''
		if _shanten >= 0 {
			if MJ.Save.Richi {
				//リーチ済ならツモ切り
				_dahai = MJ.Save.Tsumo
			}
			else {
				_dahai = MJ.Naniwokiru(MJ.Save.Tehai, MJ.Save.Tsumo, MJ.Save.Kawa, MJ.Save.Bafuhai, MJ.Save.Jifuhai, MJ.Save.Dorahyouji/
					, JOIN(MJ.Save.Player.Richi, ','), JOIN(MJ.Save.Player.Genbutsu, ','), MJ.Save.VisiblePai)
				_kakanHai = MJ.GetKakanHaiBest(MJ.Save.Tehai, MJ.Save.Tsumo, MJ.Save.Bafuhai, MJ.Save.Jifuhai, MJ.Save.Nokori, JOIN(MJ.Save.Player.Richi, ','))
			}
			_ankanHai = MJ.GetAnkanHaiBest(MJ.Save.Tehai, MJ.Save.Tsumo, MJ.Save.Richi, MJ.Save.Bafuhai, MJ.Save.Jifuhai, MJ.Save.Nokori)
		}
		if _shanten == -1 {
			_action = 'tsumo'
			_select = ''
		}
		elseif MJ.ShouldRichi(MJ.Save.Tehai, _shanten, MJ.Save.Richi, MJ.Save.Nokori, MJ.Save.Tsumo, _dahai, MJ.Save.Bafuhai, MJ.Save.Jifuhai, MJ.Save.Dorahyouji) {
			_action = 'richi'
			_select = _dahai
		}
		elseif _ankanHai != '' {
			_action = 'ankan'
			_select = _ankanHai
		}
		elseif _kakanHai != '' {
			_action = 'kakan'
			_select = _kakanHai
		}
		else {
			_action = 'sutehai'
			_select = _dahai
		}
	}
	else {//副露後
		_dahai = MJ.Naniwokiru(MJ.Save.Tehai, '', MJ.Save.Kawa, MJ.Save.Bafuhai, MJ.Save.Jifuhai, MJ.Save.Dorahyouji/
			, JOIN(MJ.Save.Player.Richi, ','), JOIN(MJ.Save.Player.Genbutsu, ','), MJ.Save.VisiblePai)
		_action = 'sutehai'
		_select = _dahai
	}
	MJ.SendResponse(reference[1], _action, _select)

	//コマンドを送らないことでサーバーに対応を委任する
	//MJ.SendResponse(reference[1])
}

//**********************************************************
// naku? 牌を鳴くか尋ねる。クライアントが可能なコマンドも送る
// Reference2: (ron|kan|pon|chi)
// Reference3: 以降、Reference2同様
//**********************************************************
MJ.naku_
{
	_action = (IARRAY(), reference[1])
	for _i = 2; _i < ARRAYSIZE(reference); _i++ {
		if reference[_i] == 'ron' {
			_action ,= 'ron'
			break
		}
		if reference[_i] == 'kan' {
			if MJ.ShouldDaiminkan(MJ.Save.Tehai, MJ.Save.Sutehai, MJ.Save.Bafuhai, MJ.Save.Jifuhai, JOIN(MJ.Save.Player.Richi, ',')) {
				_action ,= 'kan'
				break
			}
		}
		if reference[_i] == 'pon' {
			if MJ.ShouldPon(MJ.Save.Tehai, MJ.Save.Sutehai, MJ.Save.Bafuhai, MJ.Save.Jifuhai, JOIN(MJ.Save.Player.Richi, ',')) {
				_action ,= 'pon'
				break
			}
		}
		if reference[_i] == 'chi' {
			_cm = MJ.GetChiMaterialBest(MJ.Save.Tehai, MJ.Save.Sutehai, MJ.Save.Bafuhai, MJ.Save.Jifuhai, JOIN(MJ.Save.Player.Richi, ','))
			if _cm != '' {
				_am = MJ.MakeArrayFromString(_cm)
				_action ,= 'chi'
				_action ,= _am[0]
				_action ,= _am[1]
				break
			}
		}
	}
	if ARRAYSIZE(_action) == 1 {
		_action ,= 'no'
	}
	MJ.SendResponse(_action)

	//コマンドを送らないことでサーバーに対応を委任する
	//MJ.SendResponse(reference[1])
}

//**********************************************************
// tenpai? テンパイを宣言するか尋ねる
//**********************************************************
MJ.tenpai_
{
	_action = ''
	if MJ.ShouldSayTenpai(MJ.Save.Bafuhai, MJ.Save.Jifuhai, MJ.Save.Kyoku, MJ.Save.Richi, MJ.GetLeadPoint())
		_action = 'yes'
	else
		_action = 'no'
	MJ.SendResponse(reference[1], _action)

	//コマンドを送らないことでサーバーに対応を委任する
	//MJ.SendResponse(reference[1])
}

//**********************************************************
// say 発声
// Reference2: プレイヤー名
// Reference3: (chi|pon|kan|ron|tsumo|richi|tenpai|noten)
//**********************************************************
MJ.say : nonoverlap
{
	_playerName = reference[2]
	_word = reference[3]
	if _playerName == MJ.PlayerName() {
		_say = ''
		_aqtk = ''
		case _word {
		when 'chi' {
			_say = '\s[6]チー'
			_aqtk = "ち'ー"
			MJ.Save.Furo.Own = 'chi'
		}
		when 'pon' {
			_say = '\s[6]ポン'
			_aqtk = "ぽ'ん"
			MJ.Save.Furo.Own = 'pon'
		}
		when 'kan' {
			_say = '\s[6]カン'
			_aqtk = "か'ん"
			MJ.Save.Furo.Own = 'kan'
		}
		when 'ron' {
			_say = '\s[8]ロン'
			_aqtk = "ろ'ん"
		}
		when 'tsumo' {
			_say = '\s[5]ツモ'
			_aqtk = "つ'も"
		}
		when 'richi' {
			_say = '\s[5]リーチ'
			_aqtk = "り'ーち"
			MJ.Save.Richi = 1
		}
		when 'tenpai' {
			_say = '\s[5]テンパイ'
			_aqtk = "て'んぱい"
		}
		when 'noten' {
			_say = '\s[6]ノーテン'
			_aqtk = "の'ーてん"
		}
		}
		'\0' + _say + '\e'
		if MJ.IsSoundEnabled() {
			_dll = 'saori/aqtk/AqTalkSaori.dll'
			void FUNCTIONEX(_dll, 'PLAYASYNC' ,_aqtk)
		}
	}
	else {
		case _word {
		when 'chi','pon','kan' {
			MJ.Save.Furo.Other = _word
		}
		when 'richi' {
			if MJ.Save.Richi {
				'\0\w9\w9\s[8]ずいぶん強気だな。\e'
				'\0\w9\w9\s[6]受けて立とう。\e'
			}
			else {
				'\0\w9\w9\s[3]ほう…。\e'
				'\0\w9\w9\s[2]えっ。\e'
			}
			MJ.Save.Player.Richi[MJ.I(_playerName)] = 1
			MJ.Save.Player.Genbutsu[MJ.I(_playerName)] = MJ.Save.Player.Kawa[MJ.I(_playerName)]
		}
		}
	}
}

//**********************************************************
// agari あがり
// Reference2: プレイヤー名
// Reference3: 符
// Reference4: 役,ハン数
// Reference5: 以降、Reference4同様
//**********************************************************
MJ.agari
{
	MJ.Save.Status = '和了'
}

//**********************************************************
// ryukyoku 流局
//**********************************************************
MJ.ryukyoku
{
	MJ.Save.Status = '流局'
}

//******************************************************************************
// utility
//******************************************************************************
MJ.SendResponse
{
	if SHIORI3FW.IsSSTP() {
		SHIORI3FW.PushAdditionalReturn('X-SSTP-PassThru-ID', MJ.ResponseEventID())
		SHIORI3FW.PushAdditionalReturn('X-SSTP-PassThru-Reference0', MJ.Version())
		for _i = 0; _i < _argc; _i++ {
			SHIORI3FW.PushAdditionalReturn("X-SSTP-PassThru-Reference%(_i + 1)", _argv[_i])
		}
	}
	else {
		"\![raiseother,%(sender),%(MJ.ResponseEventID()),%(MJ.Version())," + JOIN(_argv, ',') + ']\e'
	}
}

SHIORI3FW.IsSSTP
{
	_sendertype = SPLIT(SHIORI3FW.GetHeaderValue('SenderType'), ',')
	if ASEARCH('sstp', _sendertype) >= 0
		1
	else
		0
}

SHIORI3FW.GetHeaderValue
{
	_header = _argv[0]
	_index = ASEARCH(_header, var.req.key)
	if _index == -1 {
		''
		return
	}
	var.req.value[_index]
}

SHIORI3FW.PushAdditionalReturn
{
	GOYA.PushAdditionalReturn(_argv)
}

SHIORI3FW.CanTalk
{
	GOYA.CanTalk()
}

//**********************************************************
// Sound
//**********************************************************
MJ.SoundDefault
{
	1
}
MJ.IsSoundEnabled
{
	if ISVAR('MJ.Sound') {
		MJ.Sound
	}
	else {
		MJ.SoundDefault()
	}
}
sys.key.m
{
	if !ISVAR('MJ.Sound') {
		MJ.Sound = !MJ.SoundDefault()
	}
	else {
		MJ.Sound = !MJ.Sound
	}
	if MJ.Sound {
		'\0\_qSound: ON\_q\e'
	}
	else {
		'\0\_qSound: OFF\_q\e'
	}
}

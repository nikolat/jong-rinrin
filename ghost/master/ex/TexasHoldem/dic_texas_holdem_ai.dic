
TH.Hand.None {0}
TH.Hand.HighCards {1}
TH.Hand.OnePair {2}
TH.Hand.TwoPair {3}
TH.Hand.ThreeOfAKind {4}
TH.Hand.Straight {5}
TH.Hand.Flush {6}
TH.Hand.FullHouse {7}
TH.Hand.FourOfAKind {8}
TH.Hand.StraightFlush {9}
TH.THUTILPATH {'saori\TexasHoldemUtil\TexasHoldemUtil.dll'}

TH.AI.PreFlop {
	_ret  = IARRAY()
	_h1_suit  = SUBSTR(TH.hand[0], 0, 1)
	_h1_num   = TOINT(SUBSTR(TH.hand[0], 1, 2))
	_h2_suit  = SUBSTR(TH.hand[1], 0, 1)
	_h2_num   = TOINT(SUBSTR(TH.hand[1], 1, 2))
	_vs_allin = 0
	// 条件式を楽に書けるようにするためのswap。
	if (_h2_num == 1 || _h1_num < _h2_num) {
		_tmp  = _h1_num
		_h1_num = _h2_num
		_h2_num = _tmp
	}
	// ペアハンドなら強いので出来るだけraiseしていく。
	if (_h1_num == _h2_num) {
		if (_h1_num == 1 || _h1_num >= 11) {
			_vs_allin = 1
		}
		if (TH.blind < TH.current_bet) {
			_ret  ,= 'call'
		}
		else {
			_ret  ,= 'raise'
			_ret  ,= TH.blind * 2
		}
	}
	// check出来るときはcheckする。
	elseif (ASEARCH('check', _argv) != -1) {
		_ret  ,= 'check'
	}
	// スーテッドのA-Anyならcallする。
	elseif (_h1_num == 1 && _h1_suit == _h2_suit && _h2_num >= 5) {
		_vs_allin = 1
		_ret  ,= 'call'
	}
	// オフスートでも8以上ならcallする。
	elseif (_h1_num == 1 && _h2_num >= 8) {
		if (_h2_num >= 11) {
			_vs_allin = 1
		}
		_ret  ,= 'call'
	}
	// TT以上ならcallする。
	elseif (_h1_num >= 10 && _h2_num >= 10) {
		_ret  ,= 'call'
	}
	// まあまあなスーテッドコネクターならcallする。
	elseif (_h1_suit == _h2_suit && _h1_num + 1 == _h2_num && _h1_num >= 7) {
		_ret  ,= 'call'
	}

	// 特に条件に当てはまらなければ降りる。
	if (ARRAYSIZE(_ret) == 0) {
		_ret  ,= 'fold'
	}
	// スタックがblindの10倍より低ければraise,callの代わりにall-inをする。
	elseif (TH.blind * 10 > TH.stack) {
		_ret  = IARRAY()
		_ret  ,= 'allin'
	}
	// ベット額が高すぎる場合は一部の強い手を除いて降りる。
	elseif (TH.blind * 5 < TH.current_bet) {
		if (_vs_allin == 0) {
			_ret  = IARRAY()
			_ret  ,= 'fold'
		}
	}
	_ret
}

TH.AI.Flop {
	_ret  = IARRAY()
	_hand_strength = FUNCTIONEX(TH.THUTILPATH(), 'hand', TH.hand)
	_community_strength = FUNCTIONEX(TH.THUTILPATH(), 'hand', TH.community)
	_strength = FUNCTIONEX(TH.THUTILPATH(), 'hand', TH.community, TH.hand)
	// ベットされている場合はコミュニティカードとペアになっている可能性
	// があるのでそれを想定した勝率を計算する。
	_rate = -1
/*	if (TH.current_bet > 0) {
		_list = IARRAY()
		foreach 'S,H,C,D'; _s {
			_num  = TOINT(SUBSTR(TH.community[0], 1, 2))
			if (ASEARCH(_s + _num, _list) == -1) {
				_list ,= _s + _num
			}
		}
		_l  = IARRAY()
		_l  ,= TH.hand
		_l  ,= TH.community
		foreach _l; _e {
			_pos  = ASEARCH(_e, _list)
			if (_pos != -1) {
				_list[_pos] = IARRAY()
			}
		}
		if (ARRAYSIZE(_list) > 0) {
			_sum  = 0
			foreach _list; _e {
				_rate = TOREAL(FUNCTIONEX(TH.THUTILPATH(), 'estimate', ARRAYSIZE(TH.community), TH.community, TH.n_players, TH.hand, _e, 'N0'))
			}
		}
	}*/
	// それ以外の場合はランダムハンドに対する勝率を計算する。
	if (_rate < 0) {
		_rate = TOREAL(FUNCTIONEX(TH.THUTILPATH(), 'estimate', ARRAYSIZE(TH.community), TH.community, TH.n_players, TH.hand))
	}

	// 手札とコミュニティカードを合わせることで役が出来ているなら
	// raiseする。
	TH.strength = _strength
	if (_community_strength < _strength && _strength >= TH.Hand.ThreeOfAKind()) {
		_ret  ,= 'raise'
		_ret  ,= TH.pot
	}
	elseif (_hand_strength == TH.Hand.HighCards() && _community_strength == TH.Hand.HighCards() && _strength >= TH.Hand.OnePair()) {
		_ret  ,= 'raise'
		_ret  ,= TH.pot
	}
	elseif (_hand_strength == TH.Hand.HighCards() && _community_strength == TH.Hand.OnePair() && _strength >= TH.Hand.TwoPair()) {
		_ret  ,= 'raise'
		_ret  ,= TH.pot
	}
	elseif (ASEARCH('check', _argv) != -1) {
		_ret  ,= 'check'
	}
	// 推定勝率がオッズに合うならcallする。
	elseif (_rate * (TH.pot + TH.total_bet + TH.current_bet) / TH.current_bet >= 100) {
		_ret  ,= 'call'
	}
	else {
		_ret  ,= 'fold'
	}
	_ret
}

TH.AI.Turn {
	_ret  = IARRAY()
	_strength = FUNCTIONEX(TH.THUTILPATH(), 'hand', TH.community, TH.hand)
	_rate = -1
/*	if (TH.current_bet > 0) {
		_list = IARRAY()
		foreach 'S,H,C,D'; _s {
			_num  = TOINT(SUBSTR(TH.community[0], 1, 2))
			if (ASEARCH(_s + _num, _list) == -1) {
				_list ,= _s + _num
			}
		}
		_l  = IARRAY()
		_l  ,= TH.hand
		_l  ,= TH.community
		foreach _l; _e {
			_pos  = ASEARCH(_e, _list)
			if (_pos != -1) {
				_list[_pos] = IARRAY()
			}
		}
		if (ARRAYSIZE(_list) > 0) {
			_sum  = 0
			foreach _list; _e {
				_rate = TOREAL(FUNCTIONEX(TH.THUTILPATH(), 'estimate', ARRAYSIZE(TH.community), TH.community, TH.n_players, TH.hand, _e, 'N0'))
			}
		}
	}*/
	if (_rate < 0) {
		_rate = TOREAL(FUNCTIONEX(TH.THUTILPATH(), 'estimate', ARRAYSIZE(TH.community), TH.community, TH.n_players, TH.hand))
	}
	if (_strength > TH.strength) {
		TH.strength = _strength
		_ret  ,= 'raise'
		_ret  ,= TH.pot
	}
	elseif (ASEARCH('check', _argv) != -1) {
		_ret  ,= 'check'
	}
	elseif (_rate * (TH.pot + TH.total_bet + TH.current_bet) / TH.current_bet >= 100) {
		_ret  ,= 'call'
	}
	else {
		_ret  ,= 'fold'
	}
	_ret
}

TH.AI.River {
	TH.AI.Turn(_argv)
}

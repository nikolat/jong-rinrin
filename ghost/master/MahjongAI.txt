//**********************************************************
// LICENSE: CC0 1.0 Universal
// http://creativecommons.org/publicdomain/zero/1.0/
//**********************************************************

//**********************************************************
// 何を切るか
//**********************************************************
//テンパイに近づける
MJ.Naniwokiru
{
	_strTehai13 = _argv[0]
	_strTsumo = _argv[1]
	_strKawa = _argv[2]
	_strBafuhai = _argv[3]
	_strJifuhai = _argv[4]
	_strDorahyouji = _argv[5]
	_aryPlayerRichi = SPLIT(_argv[6], ',')
	_aryPlayerGenbutsu = SPLIT(_argv[7], ',')
	_strVisiblePai = _argv[8]

	_arVisiblePai = MJ.MakeArrayFromString(_strVisiblePai)
	_arVisibleNum = (/
		0, 0, 0, 0, 0, 0, 0, 0, 0,/
		0, 0, 0, 0, 0, 0, 0, 0, 0,/
		0, 0, 0, 0, 0, 0, 0, 0, 0,/
		0, 0, 0, 0, 0, 0, 0)
	foreach _arVisiblePai; _p {
		_arVisibleNum[MJ.GetSortCode(_p)]++
	}

	_strTehai14 = MJ.AddHai(_strTehai13, _strTsumo)
	_arSutehaiKouho = UNIQUE(MJ.GetTehaiArrayWithoutFuro(_strTehai14))
	//ドラ
	_arDora = IARRAY()
	_arDorahyouji = MJ.MakeArrayFromString(_strDorahyouji)
	foreach _arDorahyouji; _d {
		_arDora ,= MJ.GetDoraFromDorahyouji(_d)
	}
	_strDora = JOIN(_arDora, '')
	//孤立牌
	_arKoritsuhai = MJ.GetKoritsuHaiArray(_strTehai14)

	_arDahai = IARRAY()
	_point = -1
	foreach _arSutehaiKouho; _sutehai {
		_strTehaiRemoved = MJ.RemoveHai(_strTehai14, _sutehai)
		_shanten = MJ.GetShantenYaku(_strTehaiRemoved, _strBafuhai, _strJifuhai)
		_shantenPoint = 1000 * (10 - _shanten)
		_machiPoint = 0
		_elementMaxPoint = 0
		//テンパイ時は待ちの広さ・和了点の高さを考慮
		if _shanten == 0 {
			_arMachi = MJ.GetMachiArray(_strTehaiRemoved)
			foreach _arMachi; _machi {
				_isTsumo = 1//ツモった場合を想定
				_score = MJ.GetScore(_strTehaiRemoved, _machi, _strBafuhai, _strJifuhai, _strDora, _isTsumo)
				if _score > 0 {
					_nNokori = 4 - _arVisibleNum[MJ.GetSortCode(_machi)]
					_machiPoint += _score * _nNokori
				}
			}
			_shantenPoint += 10000//テンパイを崩してまでオリないこととする
		}
		else {
			_arMentsuPattern = MJ.GetMentsuPattern(_strTehaiRemoved)
			foreach _arMentsuPattern; _strMentsu {
				_elementPoint = 0
				if _strMentsu == "chitoitsu" || _strMentsu == "kokushimusou" {
					_elementPoint = 0
				}
				else {
					_ap = SPLIT(_strMentsu, ',')
					_arTatsu = IARRAY()
					if _ap[0] != '' {//雀頭
						_nNokori = 4 - _arVisibleNum[MJ.GetSortCode(SUBSTR(_ap[0], 0, 2))]
						_elementPoint += 20 * _nNokori
					}
					_ap[0] = IARRAY()
					foreach _ap; _p {
						if STRLEN(_p) == 6 {//面子
							_elementPoint += 90
						}
						elseif STRLEN(_p) == 4 {//塔子・対子
							_arTatsu ,= _p
						}
					}
					foreach _arTatsu; _tatsu {
						_t1 = TOINT(SUBSTR(_tatsu, 0, 1))
						_t2 = TOINT(SUBSTR(_tatsu, 2, 1))
						_color = SUBSTR(_tatsu, 1, 1)
						if (_t1 != 1) && (_t1 + 1 == _t2) && (_t2 != 9) {//両面
							_nNokori1 = 4 - _arVisibleNum[MJ.GetSortCode(TOSTR(_t1 - 1) + _color)]
							_nNokori2 = 4 - _arVisibleNum[MJ.GetSortCode(TOSTR(_t2 + 1) + _color)]
							_elementPoint += 10 * (_nNokori1 + _nNokori2)
						}
						elseif _t1 == _t2 {//対子
							_nNokori = 4 - _arVisibleNum[MJ.GetSortCode(TOSTR(_t1) + _color)]
							_elementPoint += 20 * _nNokori
						}
						elseif (_t1 == 1) && (_t2 == 2) || (_t1 == 8) && (_t2 == 9) {//辺張
							_nNokori = 0
							if _t1 == 1 {
								_nNokori = 4 - _arVisibleNum[MJ.GetSortCode('3' + _color)]
							}
							else {
								_nNokori = 4 - _arVisibleNum[MJ.GetSortCode('7' + _color)]
							}
							_elementPoint += 10 * _nNokori - 5
						}
						else {//嵌張
							_nNokori = 4 - _arVisibleNum[MJ.GetSortCode(TOSTR(_t1 + 1) + _color)]
							_elementPoint += 10 * _nNokori
						}
					}
				}
				if _elementMaxPoint < _elementPoint {
					_elementMaxPoint = _elementPoint
				}
			}
		}
		//孤立牌を優先的に切る
		_koritsuPoint = 0
		if ASEARCH(_sutehai, _arKoritsuhai) >= 0 {
			_koritsuPoint = 500
		}
		//既に捨てた牌を優先的に切る
		_furitenPoint = 0
		if _sutehai _in_ _strKawa {
			_furitenPoint = 10
		}
		//ドラは残しておきたい
		_doraPoint = 0
		if ASEARCH(_sutehai, _arDora) >= 0 {
			_doraPoint = -50
		}
		//現物を優先的に切る
		_genbutsuPoint = 0
		for _i = 0; _i < ARRAYSIZE(_aryPlayerRichi); _i++ {
			if TOINT(_aryPlayerRichi[_i]) {
				if _sutehai _in_ _aryPlayerGenbutsu[_i] {
					_genbutsuPoint += 2000
					if _i == 0 {//親のリーチは特に避けたい
						_genbutsuPoint += 1000
					}
				}
			}
		}
		_dahaiPoint = _shantenPoint + _machiPoint + _elementMaxPoint + _koritsuPoint + _furitenPoint + _doraPoint + _genbutsuPoint
		if _point < _dahaiPoint {
			_point = _dahaiPoint
			_arDahai = (IARRAY, _sutehai)
		}
		elseif _point == _dahaiPoint {
			_arDahai ,= _sutehai
		}
	}
	_n = ARRAYSIZE(_arDahai)
	_index = RAND(_n)
	_arDahai[_index]
}

//手牌から副露を除去
MJ.GetTehaiArrayWithoutFuro
{
	_strTehai = _argv[0]
	_r = IARRAY()
	for _i = 0; _i < STRLEN(_strTehai); _i += 2 {
		if SUBSTR(_strTehai, _i, 1) _in_ '<(' {
			_r
			return
		}
		_h = SUBSTR(_strTehai, _i, 2)
		_r ,= _h
	}
	_r
}

//孤立牌の探索
MJ.GetKoritsuHaiArray
{
	_hai = MJ.GetTehaiArrayWithoutFuro(_argv[0])
	_arRet = IARRAY()
	for _i = 0; _i < ARRAYSIZE(_hai); _i++ {
		_num = TOINT(SUBSTR(_hai[_i], 0, 1))
		_color = SUBSTR(_hai[_i], 1, 1)
		if _color _in_ 'mps' {
			_haiP2 = '' + (_num - 2) + _color
			_haiP1 = '' + (_num - 1) + _color
			_haiN1 = '' + (_num + 1) + _color
			_haiN2 = '' + (_num + 2) + _color
			if !(ASEARCH(_haiP2, _hai) >= 0/
				|| ASEARCH(_haiP1, _hai) >= 0/
				|| ARRAYSIZE(ASEARCHEX(_hai[_i], _hai)) > 1/
				|| ASEARCH(_haiN1, _hai) >= 0/
				|| ASEARCH(_haiN2, _hai) >= 0) {
				_arRet ,= _hai[_i]
			}
		}
		elseif _color == 'z' {
			if ARRAYSIZE(ASEARCHEX(_hai[_i], _hai)) == 1 {
				_arRet ,= _hai[_i]
			}
		}
	}
	_arRet
}

//牌を追加
MJ.AddHai
{
	_strHai1 = _argv[0]
	_strHai2 = _argv[1]
	_arHai2 = MJ.MakeArrayFromString(_strHai2)
	_strToAdd = _strHai1
	for _i = 0; _i < ARRAYSIZE(_arHai2); _i++ {
		_strAdded = ''
		_isAdded = 0
		for _j = 0; _j < STRLEN(_strToAdd); _j++ {
			if SUBSTR(_strToAdd, _j, 1) == '<' {
				if !_isAdded {
					_isAdded = 1
					_strAdded = JOIN(MJ.SortHai(MJ.MakeArrayFromString(_strAdded + _arHai2[_i])), '')
				}
				if SUBSTR(_strToAdd, _j + 7, 1) == '>' {
					_strAdded += SUBSTR(_strToAdd, _j, 8)
					_j += 7
				}
				elseif SUBSTR(_strToAdd, _j + 9, 1) == '>' {
					_strAdded += SUBSTR(_strToAdd, _j, 10)
					_j += 9
				}
			}
			elseif SUBSTR(_strToAdd, _j, 1) == '(' {
				if !_isAdded {
					_isAdded = 1
					_strAdded = JOIN(MJ.SortHai(MJ.MakeArrayFromString(_strAdded + _arHai2[_i])), '')
				}
				if SUBSTR(_strToAdd, _j + 9, 1) == ')' {
					_strAdded += SUBSTR(_strToAdd, _j, 10)
					_j += 9
				}
			}
			else {
				_strAdded += SUBSTR(_strToAdd, _j, 2)
				_j++
			}
		}
		if !_isAdded {
			_strAdded = JOIN(MJ.SortHai(MJ.MakeArrayFromString(_strAdded + _arHai2[_i])), '')
		}
		_strToAdd = _strAdded
	}
	_strToAdd
}

//牌を除去
MJ.RemoveHai
{
	_strHai1 = _argv[0]
	_strHai2 = _argv[1]
	_arHai2 = MJ.MakeArrayFromString(_strHai2)
	_strToRemove = _strHai1
	for _i = 0; _i < ARRAYSIZE(_arHai2); _i++ {
		_strRemoved = ''
		_isRemoved = 0
		for _j = 0; _j < STRLEN(_strToRemove); _j++ {
			if SUBSTR(_strToRemove, _j, 1) == '<' {
				if SUBSTR(_strToRemove, _j + 7, 1) == '>' {
					_strRemoved += SUBSTR(_strToRemove, _j, 8)
					_j += 7
				}
				elseif SUBSTR(_strToRemove, _j + 9, 1) == '>' {
					_strRemoved += SUBSTR(_strToRemove, _j, 10)
					_j += 9
				}
			}
			elseif SUBSTR(_strToRemove, _j, 1) == '(' {
				if SUBSTR(_strToRemove, _j + 9, 1) == ')' {
					_strRemoved += SUBSTR(_strToRemove, _j, 10)
					_j += 9
				}
			}
			else {
				if !_isRemoved && SUBSTR(_strToRemove, _j, 2) == _arHai2[_i] {
					_isRemoved = 1
				}
				else {
					_strRemoved += SUBSTR(_strToRemove, _j, 2)
				}
				_j++
			}
		}
		_strToRemove = _strRemoved
	}
	_strToRemove
}

//"1m2m3m" -> ("1m", "2m", "3m")変換
MJ.MakeArrayFromString
{
	_s = _argv[0]
	_r = IARRAY()
	_i = 0
	while 1 {
		_e = SUBSTR(_s, _i, 2)
		if _e == '' {
			break
		}
		_r ,= _e
		_i += 2
	}
	_r
}

//ソート
MJ.SortHai
{
	_a = _argv
	_r = IARRAY()
	//バブルソートでいいや…
	while ARRAYSIZE(_a) > 0
	{
		_n = ARRAYSIZE(_a)
		_index = -1
		_minValue = 99
		_an = IARRAY()
		for _i = 0; _i < _n; _i++ {
			_v = MJ.GetSortCode(_a[_i])
			if _v < _minValue {
				if _index >= 0 {
					_an ,= _a[_index]
				}
				_index = _i
				_minValue = _v
			}
			else
			{
				_an ,= _a[_i]
			}
		}
		_r ,= _a[_index]
		_a = _an
	}
	_r
}

//ドラ表示牌からドラを求める
MJ.GetDoraFromDorahyouji
{
	_hai = _argv[0]
	_num = TOINT(SUBSTR(_hai, 0, 1))
	_color = SUBSTR(_hai, 1, 1)
	if _color _in_ 'mps' {
		_n = _num % 9 + 1
		TOSTR(_n) + _color
	}
	elseif 1 <= _num && _num <= 4 {
		_n = _num % 4 + 1
		TOSTR(_n) + _color
	}
	elseif _num == 7 {
		'5z'
	}
	else {
		_n = _num + 1
		TOSTR(_n) + _color
	}
}

//ソート順定義
MJ.GetSortCode
{
	_s = _argv[0]
	_a = SPLIT('1m,2m,3m,4m,5m,6m,7m,8m,9m,1p,2p,3p,4p,5p,6p,7p,8p,9p,1s,2s,3s,4s,5s,6s,7s,8s,9s,1z,2z,3z,4z,5z,6z,7z', ',')
	ASEARCH(_s, _a)
}

//**********************************************************
// 副露判断
//**********************************************************
MJ.GetAnkanHaiBest
{
	_tehai = _argv[0]
	_tsumoHai = _argv[1]
	_isRichi = _argv[2]
	_bafuHai = _argv[3]
	_jifuHai = _argv[4]
	_nokori = _argv[5]
	if !MJ.CanAnkan(_tehai, _tsumoHai, _isRichi, _nokori) {
		''
		return
	}
	if _isRichi {
		_tsumoHai
		return
	}
	//自身のリーチ後のみ暗槓する方針のため、コメントアウト
//	_tehaiAddTsumo = MJ.AddHai(_tehai, _tsumoHai)
//	_arAnkanHai = MJ.GetAnkanHai(_tehaiAddTsumo)
//	_shantenBefore = MJ.GetShantenYaku(_tehai, _bafuHai, _jifuHai)
//	_arAnkanHaiUseful = IARRAY()
//	foreach _arAnkanHai; _h {
//		_strTehai = MJ.RemoveHai(_tehaiAddTsumo, "%(_h)%(_h)%(_h)%(_h)") + "(%(_h)%(_h)%(_h)%(_h))"
//		_shantenAfter = MJ.GetShantenYaku(_strTehai, _bafuHai, _jifuHai)
//		if _shantenAfter != '' && _shantenAfter <= _shantenBefore
//			_arAnkanHaiUseful ,= _h
//	}
//	_n = ARRAYSIZE(_arAnkanHaiUseful)
//	if _n > 0 {
//		_arAnkanHaiUseful[RAND(_n)]
//		return
//	}
	''
}

//本当は5回目の槓の場合を考慮しないといけない
MJ.CanAnkan
{
	_tehai = _argv[0]
	_tsumoHai = _argv[1]
	_isRichi = _argv[2]
	_nokori = _argv[3]

	if _nokori == 0 {
		0
		return
	}
	_arAnkanHai = MJ.GetAnkanHai(MJ.AddHai(_tehai, _tsumoHai))
	if ARRAYSIZE(_arAnkanHai) == 0 {
		0
		return
	}
	//リーチ後の場合
	if _isRichi {
		//送りカンの場合
		if ASEARCH(_tsumoHai, _arAnkanHai) == -1 {
			0
			return
		}
		//和了の形が変わる場合
		_arMentsuPattern = MJ.GetMentsuPattern(_tehai)
		foreach _arMentsuPattern; _m {
			_ap = SPLIT(_m, ',')
			if (ASEARCH(_tsumoHai + _tsumoHai + _tsumoHai, _ap) == -1) {//常に暗刻でないとダメ
				0
				return
			}
		}
	}
	1
}

MJ.GetAnkanHai
{
	_tehai = _argv[0]
	_arHai = MJ.GetTehaiArrayWithoutFuro(_tehai)
	_arRet = IARRAY()
	foreach UNIQUE(_arHai); _h {
		if ARRAYSIZE(ASEARCHEX(_h, _arHai)) >= 4 {
			_arRet ,= _h
		}
	}
	_arRet
}

MJ.GetKakanHaiBest
{
	_tehai = _argv[0]
	_tsumoHai = _argv[1]
	_bafuHai = _argv[2]
	_jifuHai = _argv[3]
	_nokori = _argv[4]
	_aryPlayerRichi = SPLIT(_argv[5], ',')
	_r = ''
	if !MJ.CanKakan(_tehai, _tsumoHai, _nokori) {
		_r
		return
	}
	//誰かがリーチしていたらカンしない
	foreach _aryPlayerRichi; _p {
		if TOINT(_p) {
			_r
			return
		}
	}
	_tehaiAddTsumo = MJ.AddHai(_tehai, _tsumoHai)
	_arKakanHai = MJ.GetKakanHai(_tehaiAddTsumo)
	_shantenBefore = MJ.GetShantenYaku(_tehai, _bafuHai, _jifuHai)
	_arKakanHaiUseful = IARRAY()
	foreach _arKakanHai; _h {
		_strTehai = REPLACE(_tehaiAddTsumo, "<%(_h)%(_h)%(_h)>", "<%(_h)%(_h)%(_h)%(_h)>", 1)
		_strTehai = MJ.RemoveHai(_strTehai, _h)
		_shantenAfter = MJ.GetShantenYaku(_strTehai, _bafuHai, _jifuHai)
		if _shantenAfter != '' && _shantenAfter <= _shantenBefore
			_arKakanHaiUseful ,= _h
	}
	_n = ARRAYSIZE(_arKakanHaiUseful)
	if _n > 0 {
		_arKakanHaiUseful[RAND(_n)]
		return
	}
	''
}

//本当は5回目の槓の場合を考慮しないといけない
MJ.CanKakan
{
	_tehai = _argv[0]
	_tsumoHai = _argv[1]
	_nokori = _argv[2]

	if _nokori == 0 {
		0
		return
	}
	_arKakanHai = MJ.GetKakanHai(MJ.AddHai(_tehai, _tsumoHai))
	if ARRAYSIZE(_arKakanHai) == 0 {
		0
		return
	}
	1
}

MJ.GetKakanHai
{
	_tehai = _argv[0]
	_arHai = MJ.GetTehaiArrayWithoutFuro(_tehai)
	_arRet = IARRAY()
	foreach UNIQUE(_arHai); _h {
		if  "<%(_h)%(_h)%(_h)>" _in_ _tehai {
			_arRet ,= _h
		}
	}
	_arRet
}

MJ.ShouldRichi
{
	_tehai = _argv[0]
	_shanten = _argv[1]
	_isRichi = _argv[2]
	_nokori = _argv[3]
	_tsumo = _argv[4]
	_dahai = _argv[5]
	_strBafuhai = _argv[6]
	_strJifuhai = _argv[7]
	_strDorahyouji = _argv[8]
	if !MJ.CanRichi(_tehai, _shanten, _isRichi, _nokori) {
		0
		return
	}
	//親ならリーチする
	if _strJifuhai == '1z' {
		1
		return
	}
	//待ちが悪い場合は様子を見る
	_tehaiNew = MJ.RemoveHai(MJ.AddHai(_tehai, _tsumo), _dahai)
	_arMachi = MJ.GetMachiArray(_tehaiNew)
	if ARRAYSIZE(_arMachi) < 2 {
		0
		return
	}
	//役があるならヤミテンでもいいのでは
	_arDora = IARRAY()
	_arDorahyouji = MJ.MakeArrayFromString(_strDorahyouji)
	foreach _arDorahyouji; _d {
		_arDora ,= MJ.GetDoraFromDorahyouji(_d)
	}
	_strDora = JOIN(_arDora, '')
	_isTsumo = 0
	foreach _arMachi; _machi {
		_score = MJ.GetScore(_tehaiNew, _machi, _strBafuhai, _strJifuhai, _strDora, _isTsumo)
		if _score > 0 {
			0
			return
		}
	}
	1
}

MJ.CanRichi
{
	_tehai = _argv[0]
	_shanten = _argv[1]
	_isRichi = _argv[2]
	_nokori = _argv[3]
	if '<' !_in_ _tehai && _shanten == 0 && !_isRichi && _nokori >= 4 {
		1
		return
	}
	0
}

MJ.ShouldDaiminkan
{
	0
}

MJ.ShouldPon
{
	_tehai = _argv[0]
	_sutehai = _argv[1]
	_bafuHai = _argv[2]
	_jifuHai = _argv[3]
	_aryPlayerRichi = SPLIT(_argv[4], ',')
	//誰かがリーチしていたら鳴かない
	foreach _aryPlayerRichi; _p {
		if TOINT(_p) {
			0
			return
		}
	}
	_h = _sutehai
	_tehaiNew = MJ.RemoveHai(_tehai, _h + _h) + '<' + _h + _h + _h + '>'
	_shantenBefore = MJ.GetShantenYaku(_tehai, _bafuHai, _jifuHai)
	_shantenAfter = MJ.GetShantenYaku(_tehaiNew, _bafuHai, _jifuHai)
	if _shantenAfter < _shantenBefore && _shantenAfter == 0 {//それでテンパイするなら鳴く
		1
		return
	}
	0
}

MJ.GetChiMaterialBest
{
	_tehai = _argv[0]
	_sutehai = _argv[1]
	_bafuHai = _argv[2]
	_jifuHai = _argv[3]
	_aryPlayerRichi = SPLIT(_argv[4], ',')
	//誰かがリーチしていたら鳴かない
	foreach _aryPlayerRichi; _p {
		if TOINT(_p) {
			''
			return
		}
	}
	_arChi = MJ.GetChiMaterial(_tehai, _sutehai)
	_shantenBefore = MJ.GetShantenYaku(_tehai, _bafuHai, _jifuHai)
	_r = IARRAY()
	foreach _arChi; _c {
		_tehaiNew = MJ.RemoveHai(_tehai, _c) + '<' + JOIN(MJ.SortHai(MJ.MakeArrayFromString(_c + _sutehai)), '') + '>'
		_shantenAfter = MJ.GetShantenYaku(_tehaiNew, _bafuHai, _jifuHai)
		if _shantenAfter < _shantenBefore && _shantenAfter == 0 {//それでテンパイするなら鳴く
			_r ,= _c
		}
	}
	_n = ARRAYSIZE(_r)
	if _n > 0 {
		_r[RAND(_n)]
	}
	else {
		''
	}
}

MJ.GetChiMaterial
{
	_strTehai = _argv[0]
	_sutehai = _argv[1]
	_r = IARRAY()

	_n = SUBSTR(_sutehai, 0, 1)
	_color = SUBSTR(_sutehai, 1, 1)
	if _color == 'z' {
		_r
		return
	}
	_arTehai = MJ.GetTehaiArrayWithoutFuro(_strTehai)
	_a = IARRAY()
	foreach _arTehai; _hai {
		if SUBSTR(_hai, 1, 1) == _color {
			_a ,= TOINT(SUBSTR(_hai, 0, 1))
		}
	}
	if ASEARCH(_n - 2, _a) >= 0 && ASEARCH(_n - 1, _a) >= 0 {
		_r ,= TOSTR(_n - 2) + _color + TOSTR(_n - 1) + _color
	}
	if ASEARCH(_n - 1, _a) >= 0 && ASEARCH(_n + 1, _a) >= 0 {
		_r ,= TOSTR(_n - 1) + _color + TOSTR(_n + 1) + _color
	}
	if ASEARCH(_n + 1, _a) >= 0 && ASEARCH(_n + 2, _a) >= 0 {
		_r ,= TOSTR(_n + 1) + _color + TOSTR(_n + 2) + _color
	}
	_r
}

MJ.ShouldSayTenpai
{
	_bafuhai = _argv[0]
	_jifuhai = _argv[1]
	_kyoku = _argv[2]
	_isRichi = _argv[3]
	_lead = _argv[4]
	//オーラスで東家で未リーチで現在1位で2位との差が4000点より多いならノーテン宣言する
	if _bafuhai != "2z" || _jifuhai != "1z" || _kyoku != 4 || _isRichi || _lead <= 4000 {
		1
		return
	}
	0
}

//**********************************************************
// SAORIを使用する関数
//**********************************************************
//役のあるシャンテン数を求める
MJ.GetShantenYaku
{
	_strTehai = _argv[0]
	_strBafuhai = _argv[1]
	_strJifuhai = _argv[2]
	_dll = 'saori/MahjongUtil/MahjongUtil.dll'
	_shanten = FUNCTIONEX(_dll, 'shanten_yaku' ,_strTehai, _strBafuhai, _strJifuhai)
	_shanten
}

//手牌の形のパターンを求める
MJ.GetMentsuPattern
{
	_strTehai = _argv[0]
	_dll = 'saori/MahjongUtil/MahjongUtil.dll'
	_shanten = FUNCTIONEX(_dll, 'shanten' ,_strTehai)
	_mentsuPattern = valueex
	_mentsuPattern
}

//待ちを求める
MJ.GetMachiArray
{
	_strTehai = _argv[0]
	_dll = 'saori/MahjongUtil/MahjongUtil.dll'
	_strMachi = FUNCTIONEX(_dll, 'machi' ,_strTehai)
	MJ.MakeArrayFromString(_strMachi)
}

//和了点を求める
MJ.GetScore
{
	_strTehai = _argv[0]
	_strAtarihai = _argv[1]
	_strBafuhai = _argv[2]
	_strJifuhai = _argv[3]
	_strDora = _argv[4]
	_isTsumo = _argv[5]
	_isRichi = 0
	_isIppatsu = 0
	_isChankan = 0
	_isRinshan = 0
	_isFinalTileWin = 0
	_is1stRound = 0
	_dll = 'saori/MahjongUtil/MahjongUtil.dll'
	_score = FUNCTIONEX(_dll, 'score' ,_strTehai, _strAtarihai, _strBafuhai, _strJifuhai, _strDora, _isTsumo, _isRichi, _isIppatsu, _isChankan, _isRinshan, _isFinalTileWin, _is1stRound)
	_score
}
